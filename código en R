#Instalar estos paquetes antes de iniciar
install.packages("devtools")
devtools::install_github("mariytu/RegressionLibs",force=TRUE)
#esta libreria contiene las otras librerias
library(RegressionLibs)
#library(roxygen2)
#library(devtools)
#library(roxygen2)
#library(plyr)
#library(dplyr)
#modiciacion del enlace para que quede en forma de descarga directa csv
#carga los datos
datatraining <- read.csv(url
("https://docs.google.com/spreadsheets/d/1RkqOE28fmTQvpD2YCEF0WxK7b9B0WIKW06LZZsQA7VI/export?format=csv"))

#Las primeras tres columnas aparecen en color amarillo (A,B y C) contienen informacion de
#las muestras, y para efectos estadisticos deb en ser descartados.
datatraining$A<-NULL
datatraining$B<-NULL
datatraining$C<-NULL
#Eliminar las variables dependientes de los modelos de predicci贸n
#Y guardo las variables en otro data
datossalida<-data.frame(datatraining$E,datatraining$G,datatraining$I)
datatraining$D<-NULL
datatraining$E<-NULL
datatraining$F<-NULL
datatraining$G<-NULL
datatraining$H<-NULL
datatraining$I<-NULL
#Funcion que permite normalizar datos
normalize <- function(x) {return ((x - min(x)) / (max(x) - min(x)))}
normalData <- as.data.frame(lapply(datatraining,normalize)) # In range [0,1]
#normedIris1 <- normalizeData(datatraining)
#---------------------------------code------------------------------------
calculateDiff <- function(dataSet, inf, sup) {
  if (missing(dataSet)) {
    stop("Need to specify dataSet!")
  }
  if (missing(inf) || missing(sup)) {
    inf <- 1
    sup <- ncol(dataSet)
  }
  if (inf > sup) {
    stop("inf must be less than sup!")
  }
  #All parameters are OK!
  resp <- data.frame(matrix(ncol = ncol(dataSet), nrow = nrow(dataSet)))
  for (i in 1:nrow(dataSet)) {
    before <- dataSet[i,1]
    for (j in 1:ncol(dataSet)) {
      if (j >= inf && j <= sup) {
        resp[i,j] <- abs(dataSet[i,j] - before) / before
        if (is.nan(resp[i,j])) {
          resp[i,j] <- 0
        }
      }
      before <- dataSet[i,j]
    }
  }
  return (resp)
}
#' examples
#' iris.x <- iris[,1:4]
#' diffValues <- calculateDiff(iris.x)
#' limit = 0.15
#' columnsNoise <- getColumnsNoise(diffValues, limit)
getColumnsNoise <- function(data, limit, inf, sup) {
  if (missing(data)) {
    stop("Need to specify data!")
  }
  if (missing(limit)) {
    stop("Need to specify limit!")
  }
  if (missing(inf) || missing(sup)) {
    inf <- 1
    sup <- ncol(data)
  }
  if (inf > sup) {
    stop("inf must be less than sup!")
  }
  #All parameters are OK!
  noise <- data.frame(j=integer(),stringsAsFactors=FALSE)
  for (j in 1:ncol(data)) {
    if (j >= inf && j <= sup) {
      x <- data[,j]
      aux <- count(x >= limit)
      
      for (i in 1:nrow(aux)) {
        if (aux[i,1]==TRUE) {
          noise[nrow(noise)+1,1] <- j
        }
      }
    }
  }
  return (noise)
}
noiseDetection <- function(data, limit, cuttingTolerantCount, inf, sup) {
  CutZone <- data.frame(matrix(0, ncol = ncol(data), nrow = nrow(data)))
  FinalCutZone <- data.frame(matrix(0, ncol = ncol(data), nrow = 1))
  
  rows <- nrow(data)
  columns <- ncol(data)
  
  for (i in 1:rows) {
    before <- data[i,1]
    for (j in 1:columns) {
      val <- data[i,j]
      if (j >= inf && j <= sup) {
        if ((abs(val - before) / before) >= limit) {
          CutZone[i,j] <- 1
        }
      }
      before <- val
    }
  }
  
  for (i in 1:rows) {
    for (j in 1:columns) {
      if (j >= inf && j <= sup) {
        if (CutZone[i,j] == 1) {
          FinalCutZone[1,j] <- 1
        }
      }
    }
  }
  
  for (j in 1:columns) {
    if (FinalCutZone[1,j] == 1) {
      i <- 1
      cut <- 1
      while ((i+j) < columns && i <= cuttingTolerantCount) {
        if (FinalCutZone[1,(i+j)] != 1) {
          cut <- 0
        }
        i <- i + 1
      }
      if (cut == 1) {
        FinalCutZone[1,j] <- 1
      }
      else {
        FinalCutZone[1,j] <- 0
      }
    }
  }
  
  return (FinalCutZone)
}
#--------------------------code--------------------------------------------------
#A partir del c贸digo anterior calcula los Ruidos
diffValues <- calculateDiff(normalData)
limit = 0.15
columnsNoise <- getColumnsNoise(diffValues, limit)
#Elimina los ruidos de los datos
Dataunoiseless<-normalData[,-columnsNoise$j]
DataBase<-datatraining[,-columnsNoise$j]
#Detecci贸n de Outlier
#library(DMwR)
# remove "Species", which is a categorical column
#outlier.scores <- lofactor(Dataunoiseless, k=5)
#plot(density(outlier.scores))
library(Rlof)
outlier.scores1 <- lof(Dataunoiseless, k=5)
outlier.scores2 <- lof(Dataunoiseless, k=6)
outlier.scores3 <- lof(Dataunoiseless, k=7)
outlier.scores4 <- lof(Dataunoiseless, k=8)
outlier.scores5 <- lof(Dataunoiseless, k=9)
outlier.scores6 <- lof(Dataunoiseless, k=10)
outliers1 <- order(outlier.scores1, decreasing=T)[1:5]
outliers2 <- order(outlier.scores2, decreasing=T)[1:5]
outliers3 <- order(outlier.scores3, decreasing=T)[1:5]
outliers4 <- order(outlier.scores4, decreasing=T)[1:5]
outliers5 <- order(outlier.scores5, decreasing=T)[1:5]
outliers6 <- order(outlier.scores6, decreasing=T)[1:5]
# try with different number of neighbors (k = 5,6,7,8,9 and 10)
outlier.scores <- lof(Dataunoiseless, k=c(5:10))
outliers <- order(outlier.scores, decreasing=T)[1:5]
print(outliers1)
print(outliers2)
print(outliers3)
print(outliers4)
print(outliers5)
print(outliers6)
#Eliminaci贸n de outlier
Data<-Dataunoiseless[-63,]
Data<-Data[-45,]
DataBase<-DataBase[-63,]
DataBase<-DataBase[-45,]
DataBase <- as.data.frame(lapply(DataBase,normalize)) # In range [0,1]
